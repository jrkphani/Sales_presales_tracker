{"ast":null,"code":"var _jsxFileName = \"/Users/jrkphani/Projects/Sales_presales_tracker/frontend/src/components/dashboard/RegionRevenue.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BarChart from '../charts/BarChart';\nimport './DashboardPanels.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegionRevenue = ({\n  data,\n  formatCurrency\n}) => {\n  _s();\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedDeals, setSelectedDeals] = useState([]);\n\n  // Get unique regions from the data\n  const regions = Object.values(data).reduce((acc, quarterData) => {\n    Object.keys(quarterData).forEach(region => {\n      if (!acc.includes(region)) {\n        acc.push(region);\n      }\n    });\n    return acc;\n  }, []);\n\n  // Transform pipeline data for chart\n  const transformDataForChart = () => {\n    return Object.entries(data).map(([quarter, regions]) => {\n      const quarterData = {\n        quarter,\n        ...Object.entries(regions).reduce((acc, [region, data]) => {\n          acc[`${region}_value`] = data.value;\n          acc[`${region}_count`] = data.count;\n          return acc;\n        }, {})\n      };\n      return quarterData;\n    });\n  };\n  const handleChartClick = data => {\n    if (data && data.activePayload && data.activePayload.length) {\n      const quarter = data.activePayload[0].payload.quarter;\n      const regionData = Object.entries(data[quarter] || {}).filter(([key]) => !key.includes('_count')).map(([region, value]) => ({\n        region: region.replace('_value', ''),\n        value\n      }));\n      setSelectedRegion(quarter);\n      setSelectedDeals(regionData);\n    }\n  };\n  const resetSelection = () => {\n    setSelectedRegion(null);\n    setSelectedDeals([]);\n  };\n  const chartData = transformDataForChart();\n\n  // Generate keys for the chart based on actual regions\n  const chartKeys = regions.map(region => `${region}_value`);\n  // Generate colors for each region (you might want to customize this)\n  const chartColors = regions.map((_, index) => {\n    const hue = index * 137.5 % 360; // Golden angle approximation for good color distribution\n    return `hsl(${hue}, 70%, 50%)`;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"region-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"panel-title\",\n        children: \"Revenue by Region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), selectedRegion && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: resetSelection,\n        children: \"\\u2190 Back to all regions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), !selectedRegion ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"chart-instruction\",\n          children: \"Click on a quarter to see detailed breakdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n          data: chartData,\n          keys: chartKeys,\n          colors: chartColors,\n          onClick: handleChartClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-summary card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"region-title\",\n          children: selectedRegion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region-metrics\",\n          children: selectedDeals.map(deal => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"region-metric\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-label\",\n              children: [deal.region, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value\",\n              children: formatCurrency(deal.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-count\",\n              children: [\"(\", data[selectedRegion][deal.region].count, \" deals)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this)]\n          }, deal.region, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionRevenue, \"DF472gBA5XgNS+qmiMngj/wu8dA=\");\n_c = RegionRevenue;\nexport default RegionRevenue;\nvar _c;\n$RefreshReg$(_c, \"RegionRevenue\");","map":{"version":3,"names":["React","useState","BarChart","jsxDEV","_jsxDEV","RegionRevenue","data","formatCurrency","_s","selectedRegion","setSelectedRegion","selectedDeals","setSelectedDeals","regions","Object","values","reduce","acc","quarterData","keys","forEach","region","includes","push","transformDataForChart","entries","map","quarter","value","count","handleChartClick","activePayload","length","payload","regionData","filter","key","replace","resetSelection","chartData","chartKeys","chartColors","_","index","hue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","colors","deal","_c","$RefreshReg$"],"sources":["/Users/jrkphani/Projects/Sales_presales_tracker/frontend/src/components/dashboard/RegionRevenue.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BarChart from '../charts/BarChart';\nimport './DashboardPanels.css';\n\nconst RegionRevenue = ({ data, formatCurrency }) => {\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedDeals, setSelectedDeals] = useState([]);\n  \n  // Get unique regions from the data\n  const regions = Object.values(data).reduce((acc, quarterData) => {\n    Object.keys(quarterData).forEach(region => {\n      if (!acc.includes(region)) {\n        acc.push(region);\n      }\n    });\n    return acc;\n  }, []);\n\n  // Transform pipeline data for chart\n  const transformDataForChart = () => {\n    return Object.entries(data).map(([quarter, regions]) => {\n      const quarterData = {\n        quarter,\n        ...Object.entries(regions).reduce((acc, [region, data]) => {\n          acc[`${region}_value`] = data.value;\n          acc[`${region}_count`] = data.count;\n          return acc;\n        }, {})\n      };\n      return quarterData;\n    });\n  };\n\n  const handleChartClick = (data) => {\n    if (data && data.activePayload && data.activePayload.length) {\n      const quarter = data.activePayload[0].payload.quarter;\n      const regionData = Object.entries(data[quarter] || {})\n        .filter(([key]) => !key.includes('_count'))\n        .map(([region, value]) => ({\n          region: region.replace('_value', ''),\n          value\n        }));\n      setSelectedRegion(quarter);\n      setSelectedDeals(regionData);\n    }\n  };\n  \n  const resetSelection = () => {\n    setSelectedRegion(null);\n    setSelectedDeals([]);\n  };\n  \n  const chartData = transformDataForChart();\n  \n  // Generate keys for the chart based on actual regions\n  const chartKeys = regions.map(region => `${region}_value`);\n  // Generate colors for each region (you might want to customize this)\n  const chartColors = regions.map((_, index) => {\n    const hue = (index * 137.5) % 360; // Golden angle approximation for good color distribution\n    return `hsl(${hue}, 70%, 50%)`;\n  });\n  \n  return (\n    <div className=\"region-panel\">\n      <div className=\"panel-header\">\n        <h2 className=\"panel-title\">Revenue by Region</h2>\n        {selectedRegion && (\n          <button className=\"btn btn-secondary\" onClick={resetSelection}>\n            ‚Üê Back to all regions\n          </button>\n        )}\n      </div>\n      \n      {!selectedRegion ? (\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <p className=\"chart-instruction\">Click on a quarter to see detailed breakdown</p>\n            <BarChart \n              data={chartData}\n              keys={chartKeys}\n              colors={chartColors}\n              onClick={handleChartClick}\n            />\n          </div>\n        </div>\n      ) : (\n        <div>\n          <div className=\"region-summary card\">\n            <h3 className=\"region-title\">{selectedRegion}</h3>\n            <div className=\"region-metrics\">\n              {selectedDeals.map(deal => (\n                <div key={deal.region} className=\"region-metric\">\n                  <span className=\"metric-label\">{deal.region}:</span>\n                  <span className=\"metric-value\">\n                    {formatCurrency(deal.value)}\n                  </span>\n                  <span className=\"metric-count\">\n                    ({data[selectedRegion][deal.region].count} deals)\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RegionRevenue;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}