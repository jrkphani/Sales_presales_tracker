{"ast":null,"code":"// Sales data service for processing current-data.json\n\n/**\n * Transform raw deals data into dashboard format\n * @param {Array} deals - Array of deal objects from current-data.json\n * @returns {Object} Transformed dashboard data\n */\nfunction transformDealsToDashboardData(deals) {\n  // Get unique regions from the deals\n  const uniqueRegions = [...new Set(deals.map(deal => deal.Region || 'Unassigned'))];\n  const dashboardData = {\n    regional_pipeline: initializeRegionalPipeline(uniqueRegions),\n    stage_region_breakdown: initializeRegionBreakdown(uniqueRegions),\n    en_nn_split: initializeENNNSplit(uniqueRegions),\n    revenue_projection: initializeRevenueProjection(uniqueRegions),\n    potential_closures: initializePotentialClosures(uniqueRegions),\n    opportunity_types: initializeOpportunityTypes(uniqueRegions),\n    stage_movement: initializeStageMovement(uniqueRegions),\n    financial_year: getCurrentFinancialYear()\n  };\n\n  // Process each deal\n  deals.forEach(deal => {\n    const amount = parseFloat(deal.Amount) || 0;\n    const region = deal.Region || 'Unassigned';\n    const quarter = getQuarterFromDate(deal.Closing_Date);\n\n    // Update regional pipeline\n    if (quarter && dashboardData.regional_pipeline[quarter][region]) {\n      dashboardData.regional_pipeline[quarter][region].value += amount;\n      dashboardData.regional_pipeline[quarter][region].count++;\n    }\n\n    // Update stage breakdown\n    updateStageBreakdown(dashboardData.stage_region_breakdown[region], deal.Stage, amount);\n\n    // Update EN/NN split\n    const dealType = deal.Type || '';\n    const isEN = dealType.includes('EN') || dealType.includes('Existing');\n    const splitCategory = isEN ? 'EN' : 'NN';\n    dashboardData.en_nn_split[region][splitCategory].value += amount;\n    dashboardData.en_nn_split[region][splitCategory].count++;\n\n    // Update revenue projection\n    updateRevenueProjection(dashboardData.revenue_projection[region], deal);\n\n    // Update potential closures\n    if (isPotentialClosure(deal)) {\n      dashboardData.potential_closures[region].push({\n        name: deal.Deal_Name,\n        value: amount,\n        stage: deal.Stage,\n        action: determineAction(deal)\n      });\n    }\n\n    // Update opportunity types\n    updateOpportunityTypes(dashboardData.opportunity_types[region], deal.Type, amount);\n  });\n  return dashboardData;\n}\n\n// Helper functions\nfunction initializeRegionalPipeline(regions) {\n  const quarters = ['Q1', 'Q2', 'Q3', 'Q4'];\n  return quarters.reduce((acc, quarter) => {\n    acc[quarter] = regions.reduce((regionAcc, region) => {\n      regionAcc[region] = {\n        value: 0,\n        count: 0\n      };\n      return regionAcc;\n    }, {});\n    return acc;\n  }, {});\n}\nfunction initializeRegionBreakdown(regions) {\n  return regions.reduce((acc, region) => {\n    acc[region] = {\n      stages: []\n    };\n    return acc;\n  }, {});\n}\nfunction initializeENNNSplit(regions) {\n  return regions.reduce((acc, region) => {\n    acc[region] = {\n      EN: {\n        value: 0,\n        count: 0\n      },\n      NN: {\n        value: 0,\n        count: 0\n      }\n    };\n    return acc;\n  }, {});\n}\nfunction initializeRevenueProjection(regions) {\n  return regions.reduce((acc, region) => {\n    acc[region] = {\n      quota: 0,\n      achieved: 0,\n      projected_80: 0,\n      projected_all: 0\n    };\n    return acc;\n  }, {});\n}\nfunction initializePotentialClosures(regions) {\n  return regions.reduce((acc, region) => {\n    acc[region] = [];\n    return acc;\n  }, {});\n}\nfunction initializeOpportunityTypes(regions) {\n  return regions.reduce((acc, region) => {\n    acc[region] = {\n      POC: {\n        value: 0,\n        count: 0\n      },\n      MAP: {\n        value: 0,\n        count: 0\n      },\n      GenAI: {\n        value: 0,\n        count: 0\n      }\n    };\n    return acc;\n  }, {});\n}\nfunction initializeStageMovement(regions) {\n  return regions.reduce((acc, region) => {\n    acc[region] = [];\n    return acc;\n  }, {});\n}\nfunction getCurrentFinancialYear() {\n  const now = new Date();\n  const currentMonth = now.getMonth();\n  const currentYear = now.getFullYear();\n  const startYear = currentMonth < 3 ? currentYear - 1 : currentYear;\n  return `${startYear}-${startYear + 1}`;\n}\nfunction getQuarterFromDate(dateString) {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n  const month = date.getMonth();\n  if (month >= 3 && month <= 5) return 'Q1';\n  if (month >= 6 && month <= 8) return 'Q2';\n  if (month >= 9 && month <= 11) return 'Q3';\n  return 'Q4';\n}\nfunction updateStageBreakdown(regionBreakdown, stage, amount) {\n  if (!stage) return;\n  const existingStage = regionBreakdown.stages.find(s => s.name === stage);\n  if (existingStage) {\n    existingStage.value += amount;\n    existingStage.count++;\n  } else {\n    regionBreakdown.stages.push({\n      name: stage,\n      value: amount,\n      count: 1\n    });\n  }\n}\nfunction updateRevenueProjection(projection, deal) {\n  const amount = parseFloat(deal.Amount) || 0;\n  const probability = parseFloat(deal.Probability) || 0;\n  if (deal.Stage === 'Closed Won') {\n    projection.achieved += amount;\n  }\n  if (probability >= 80) {\n    projection.projected_80 += amount * (probability / 100);\n  }\n  projection.projected_all += amount * (probability / 100);\n}\nfunction isPotentialClosure(deal) {\n  const probability = parseFloat(deal.Probability) || 0;\n  const stage = deal.Stage || '';\n  return probability >= 70 && !stage.toLowerCase().includes('closed');\n}\nfunction determineAction(deal) {\n  var _deal$Stage;\n  const stage = ((_deal$Stage = deal.Stage) === null || _deal$Stage === void 0 ? void 0 : _deal$Stage.toLowerCase()) || '';\n  if (stage.includes('proposal')) return 'Follow up on proposal';\n  if (stage.includes('negotiation')) return 'Schedule negotiation meeting';\n  return 'Review and update';\n}\nfunction updateOpportunityTypes(types, dealType, amount) {\n  if (!dealType) return;\n  dealType = dealType.toUpperCase();\n  if (dealType.includes('POC')) {\n    types.POC.value += amount;\n    types.POC.count++;\n  } else if (dealType.includes('MAP')) {\n    types.MAP.value += amount;\n    types.MAP.count++;\n  } else if (dealType.includes('GENAI')) {\n    types.GenAI.value += amount;\n    types.GenAI.count++;\n  }\n}\n\n// Fetch dashboard data from backend API\nexport async function getDashboardData() {\n  const response = await fetch('http://localhost:5000/api/dashboard-data');\n  if (!response.ok) throw new Error('Failed to fetch dashboard data');\n  return await response.json();\n}","map":{"version":3,"names":["transformDealsToDashboardData","deals","uniqueRegions","Set","map","deal","Region","dashboardData","regional_pipeline","initializeRegionalPipeline","stage_region_breakdown","initializeRegionBreakdown","en_nn_split","initializeENNNSplit","revenue_projection","initializeRevenueProjection","potential_closures","initializePotentialClosures","opportunity_types","initializeOpportunityTypes","stage_movement","initializeStageMovement","financial_year","getCurrentFinancialYear","forEach","amount","parseFloat","Amount","region","quarter","getQuarterFromDate","Closing_Date","value","count","updateStageBreakdown","Stage","dealType","Type","isEN","includes","splitCategory","updateRevenueProjection","isPotentialClosure","push","name","Deal_Name","stage","action","determineAction","updateOpportunityTypes","regions","quarters","reduce","acc","regionAcc","stages","EN","NN","quota","achieved","projected_80","projected_all","POC","MAP","GenAI","now","Date","currentMonth","getMonth","currentYear","getFullYear","startYear","dateString","date","month","regionBreakdown","existingStage","find","s","projection","probability","Probability","toLowerCase","_deal$Stage","types","toUpperCase","getDashboardData","response","fetch","ok","Error","json"],"sources":["/Users/jrkphani/Projects/Sales_presales_tracker/frontend/src/services/data/sales-data-service.js"],"sourcesContent":["// Sales data service for processing current-data.json\n\n/**\n * Transform raw deals data into dashboard format\n * @param {Array} deals - Array of deal objects from current-data.json\n * @returns {Object} Transformed dashboard data\n */\nfunction transformDealsToDashboardData(deals) {\n    // Get unique regions from the deals\n    const uniqueRegions = [...new Set(deals.map(deal => deal.Region || 'Unassigned'))];\n    \n    const dashboardData = {\n        regional_pipeline: initializeRegionalPipeline(uniqueRegions),\n        stage_region_breakdown: initializeRegionBreakdown(uniqueRegions),\n        en_nn_split: initializeENNNSplit(uniqueRegions),\n        revenue_projection: initializeRevenueProjection(uniqueRegions),\n        potential_closures: initializePotentialClosures(uniqueRegions),\n        opportunity_types: initializeOpportunityTypes(uniqueRegions),\n        stage_movement: initializeStageMovement(uniqueRegions),\n        financial_year: getCurrentFinancialYear()\n    };\n\n    // Process each deal\n    deals.forEach(deal => {\n        const amount = parseFloat(deal.Amount) || 0;\n        const region = deal.Region || 'Unassigned';\n        const quarter = getQuarterFromDate(deal.Closing_Date);\n        \n        // Update regional pipeline\n        if (quarter && dashboardData.regional_pipeline[quarter][region]) {\n            dashboardData.regional_pipeline[quarter][region].value += amount;\n            dashboardData.regional_pipeline[quarter][region].count++;\n        }\n\n        // Update stage breakdown\n        updateStageBreakdown(dashboardData.stage_region_breakdown[region], deal.Stage, amount);\n\n        // Update EN/NN split\n        const dealType = deal.Type || '';\n        const isEN = dealType.includes('EN') || dealType.includes('Existing');\n        const splitCategory = isEN ? 'EN' : 'NN';\n        dashboardData.en_nn_split[region][splitCategory].value += amount;\n        dashboardData.en_nn_split[region][splitCategory].count++;\n\n        // Update revenue projection\n        updateRevenueProjection(dashboardData.revenue_projection[region], deal);\n\n        // Update potential closures\n        if (isPotentialClosure(deal)) {\n            dashboardData.potential_closures[region].push({\n                name: deal.Deal_Name,\n                value: amount,\n                stage: deal.Stage,\n                action: determineAction(deal)\n            });\n        }\n\n        // Update opportunity types\n        updateOpportunityTypes(dashboardData.opportunity_types[region], deal.Type, amount);\n    });\n\n    return dashboardData;\n}\n\n// Helper functions\nfunction initializeRegionalPipeline(regions) {\n    const quarters = ['Q1', 'Q2', 'Q3', 'Q4'];\n    return quarters.reduce((acc, quarter) => {\n        acc[quarter] = regions.reduce((regionAcc, region) => {\n            regionAcc[region] = { value: 0, count: 0 };\n            return regionAcc;\n        }, {});\n        return acc;\n    }, {});\n}\n\nfunction initializeRegionBreakdown(regions) {\n    return regions.reduce((acc, region) => {\n        acc[region] = { stages: [] };\n        return acc;\n    }, {});\n}\n\nfunction initializeENNNSplit(regions) {\n    return regions.reduce((acc, region) => {\n        acc[region] = { \n            EN: { value: 0, count: 0 }, \n            NN: { value: 0, count: 0 } \n        };\n        return acc;\n    }, {});\n}\n\nfunction initializeRevenueProjection(regions) {\n    return regions.reduce((acc, region) => {\n        acc[region] = { \n            quota: 0, \n            achieved: 0, \n            projected_80: 0, \n            projected_all: 0 \n        };\n        return acc;\n    }, {});\n}\n\nfunction initializePotentialClosures(regions) {\n    return regions.reduce((acc, region) => {\n        acc[region] = [];\n        return acc;\n    }, {});\n}\n\nfunction initializeOpportunityTypes(regions) {\n    return regions.reduce((acc, region) => {\n        acc[region] = { \n            POC: { value: 0, count: 0 }, \n            MAP: { value: 0, count: 0 }, \n            GenAI: { value: 0, count: 0 } \n        };\n        return acc;\n    }, {});\n}\n\nfunction initializeStageMovement(regions) {\n    return regions.reduce((acc, region) => {\n        acc[region] = [];\n        return acc;\n    }, {});\n}\n\nfunction getCurrentFinancialYear() {\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    const startYear = currentMonth < 3 ? currentYear - 1 : currentYear;\n    return `${startYear}-${startYear + 1}`;\n}\n\nfunction getQuarterFromDate(dateString) {\n    if (!dateString) return null;\n    const date = new Date(dateString);\n    const month = date.getMonth();\n    if (month >= 3 && month <= 5) return 'Q1';\n    if (month >= 6 && month <= 8) return 'Q2';\n    if (month >= 9 && month <= 11) return 'Q3';\n    return 'Q4';\n}\n\nfunction updateStageBreakdown(regionBreakdown, stage, amount) {\n    if (!stage) return;\n    const existingStage = regionBreakdown.stages.find(s => s.name === stage);\n    if (existingStage) {\n        existingStage.value += amount;\n        existingStage.count++;\n    } else {\n        regionBreakdown.stages.push({\n            name: stage,\n            value: amount,\n            count: 1\n        });\n    }\n}\n\nfunction updateRevenueProjection(projection, deal) {\n    const amount = parseFloat(deal.Amount) || 0;\n    const probability = parseFloat(deal.Probability) || 0;\n\n    if (deal.Stage === 'Closed Won') {\n        projection.achieved += amount;\n    }\n\n    if (probability >= 80) {\n        projection.projected_80 += amount * (probability / 100);\n    }\n    projection.projected_all += amount * (probability / 100);\n}\n\nfunction isPotentialClosure(deal) {\n    const probability = parseFloat(deal.Probability) || 0;\n    const stage = deal.Stage || '';\n    return probability >= 70 && !stage.toLowerCase().includes('closed');\n}\n\nfunction determineAction(deal) {\n    const stage = deal.Stage?.toLowerCase() || '';\n    if (stage.includes('proposal')) return 'Follow up on proposal';\n    if (stage.includes('negotiation')) return 'Schedule negotiation meeting';\n    return 'Review and update';\n}\n\nfunction updateOpportunityTypes(types, dealType, amount) {\n    if (!dealType) return;\n    dealType = dealType.toUpperCase();\n    \n    if (dealType.includes('POC')) {\n        types.POC.value += amount;\n        types.POC.count++;\n    } else if (dealType.includes('MAP')) {\n        types.MAP.value += amount;\n        types.MAP.count++;\n    } else if (dealType.includes('GENAI')) {\n        types.GenAI.value += amount;\n        types.GenAI.count++;\n    }\n}\n\n// Fetch dashboard data from backend API\nexport async function getDashboardData() {\n  const response = await fetch('http://localhost:5000/api/dashboard-data');\n  if (!response.ok) throw new Error('Failed to fetch dashboard data');\n  return await response.json();\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}