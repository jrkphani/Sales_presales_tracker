{"ast":null,"code":"// Sales data service for processing current-data.json\nimport dealsData from '../../data/current-data.json';\n\n/**\n * Transform raw deals data into dashboard format\n * @param {Array} deals - Array of deal objects from current-data.json\n * @returns {Object} Transformed dashboard data\n */\nfunction transformDealsToDashboardData(deals) {\n  const dashboardData = {\n    regional_pipeline: initializeRegionalPipeline(),\n    stage_region_breakdown: initializeRegionBreakdown(),\n    en_nn_split: initializeENNNSplit(),\n    revenue_projection: initializeRevenueProjection(),\n    potential_closures: initializePotentialClosures(),\n    opportunity_types: initializeOpportunityTypes(),\n    stage_movement: initializeStageMovement(),\n    financial_year: getCurrentFinancialYear()\n  };\n\n  // Process each deal\n  deals.forEach(deal => {\n    const amount = parseFloat(deal.Amount) || 0;\n    const region = mapRegion(deal.Region);\n    const quarter = getQuarterFromDate(deal.Closing_Date);\n\n    // Update regional pipeline\n    if (quarter && dashboardData.regional_pipeline[quarter][region]) {\n      dashboardData.regional_pipeline[quarter][region].value += amount;\n      dashboardData.regional_pipeline[quarter][region].count++;\n    }\n\n    // Update stage breakdown\n    updateStageBreakdown(dashboardData.stage_region_breakdown[region], deal.Stage, amount);\n\n    // Update EN/NN split\n    const dealType = deal.Type || '';\n    const isEN = dealType.includes('EN') || dealType.includes('Existing');\n    const splitCategory = isEN ? 'EN' : 'NN';\n    dashboardData.en_nn_split[region][splitCategory].value += amount;\n    dashboardData.en_nn_split[region][splitCategory].count++;\n\n    // Update revenue projection\n    updateRevenueProjection(dashboardData.revenue_projection[region], deal);\n\n    // Update potential closures\n    if (isPotentialClosure(deal)) {\n      dashboardData.potential_closures[region].push({\n        name: deal.Deal_Name,\n        value: amount,\n        stage: deal.Stage,\n        action: determineAction(deal)\n      });\n    }\n\n    // Update opportunity types\n    updateOpportunityTypes(dashboardData.opportunity_types[region], deal.Type, amount);\n  });\n  return dashboardData;\n}\n\n// Helper functions\nfunction initializeRegionalPipeline() {\n  return {\n    Q1: {\n      APAC: {\n        value: 0,\n        count: 0\n      },\n      EMEA: {\n        value: 0,\n        count: 0\n      },\n      Americas: {\n        value: 0,\n        count: 0\n      }\n    },\n    Q2: {\n      APAC: {\n        value: 0,\n        count: 0\n      },\n      EMEA: {\n        value: 0,\n        count: 0\n      },\n      Americas: {\n        value: 0,\n        count: 0\n      }\n    },\n    Q3: {\n      APAC: {\n        value: 0,\n        count: 0\n      },\n      EMEA: {\n        value: 0,\n        count: 0\n      },\n      Americas: {\n        value: 0,\n        count: 0\n      }\n    },\n    Q4: {\n      APAC: {\n        value: 0,\n        count: 0\n      },\n      EMEA: {\n        value: 0,\n        count: 0\n      },\n      Americas: {\n        value: 0,\n        count: 0\n      }\n    }\n  };\n}\nfunction initializeRegionBreakdown() {\n  return {\n    APAC: {\n      stages: []\n    },\n    EMEA: {\n      stages: []\n    },\n    Americas: {\n      stages: []\n    }\n  };\n}\nfunction initializeENNNSplit() {\n  return {\n    APAC: {\n      EN: {\n        value: 0,\n        count: 0\n      },\n      NN: {\n        value: 0,\n        count: 0\n      }\n    },\n    EMEA: {\n      EN: {\n        value: 0,\n        count: 0\n      },\n      NN: {\n        value: 0,\n        count: 0\n      }\n    },\n    Americas: {\n      EN: {\n        value: 0,\n        count: 0\n      },\n      NN: {\n        value: 0,\n        count: 0\n      }\n    }\n  };\n}\nfunction initializeRevenueProjection() {\n  return {\n    APAC: {\n      quota: 0,\n      achieved: 0,\n      projected_80: 0,\n      projected_all: 0\n    },\n    EMEA: {\n      quota: 0,\n      achieved: 0,\n      projected_80: 0,\n      projected_all: 0\n    },\n    Americas: {\n      quota: 0,\n      achieved: 0,\n      projected_80: 0,\n      projected_all: 0\n    }\n  };\n}\nfunction initializePotentialClosures() {\n  return {\n    APAC: [],\n    EMEA: [],\n    Americas: []\n  };\n}\nfunction initializeOpportunityTypes() {\n  return {\n    APAC: {\n      POC: {\n        value: 0,\n        count: 0\n      },\n      MAP: {\n        value: 0,\n        count: 0\n      },\n      GenAI: {\n        value: 0,\n        count: 0\n      }\n    },\n    EMEA: {\n      POC: {\n        value: 0,\n        count: 0\n      },\n      MAP: {\n        value: 0,\n        count: 0\n      },\n      GenAI: {\n        value: 0,\n        count: 0\n      }\n    },\n    Americas: {\n      POC: {\n        value: 0,\n        count: 0\n      },\n      MAP: {\n        value: 0,\n        count: 0\n      },\n      GenAI: {\n        value: 0,\n        count: 0\n      }\n    }\n  };\n}\nfunction initializeStageMovement() {\n  return {\n    APAC: [],\n    EMEA: [],\n    Americas: []\n  };\n}\nfunction getCurrentFinancialYear() {\n  const now = new Date();\n  const currentMonth = now.getMonth();\n  const currentYear = now.getFullYear();\n  const startYear = currentMonth < 3 ? currentYear - 1 : currentYear;\n  return `${startYear}-${startYear + 1}`;\n}\nfunction mapRegion(region) {\n  if (!region) return 'APAC';\n  region = region.toUpperCase();\n  if (region.includes('INDIA') || region.includes('ASIA') || region.includes('SINGAPORE') || region.includes('MALAYSIA') || region.includes('PHILIPPINES') || region.includes('THAILAND')) {\n    return 'APAC';\n  }\n  if (region.includes('EUROPE') || region.includes('EMEA') || region.includes('MIDDLE EAST')) {\n    return 'EMEA';\n  }\n  return 'Americas';\n}\nfunction getQuarterFromDate(dateString) {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n  const month = date.getMonth();\n  if (month >= 3 && month <= 5) return 'Q1';\n  if (month >= 6 && month <= 8) return 'Q2';\n  if (month >= 9 && month <= 11) return 'Q3';\n  return 'Q4';\n}\nfunction updateStageBreakdown(regionBreakdown, stage, amount) {\n  if (!stage) return;\n  const existingStage = regionBreakdown.stages.find(s => s.name === stage);\n  if (existingStage) {\n    existingStage.value += amount;\n    existingStage.count++;\n  } else {\n    regionBreakdown.stages.push({\n      name: stage,\n      value: amount,\n      count: 1\n    });\n  }\n}\nfunction updateRevenueProjection(projection, deal) {\n  const amount = parseFloat(deal.Amount) || 0;\n  const probability = parseFloat(deal.Probability) || 0;\n  if (deal.Stage === 'Closed Won') {\n    projection.achieved += amount;\n  }\n  if (probability >= 80) {\n    projection.projected_80 += amount * (probability / 100);\n  }\n  projection.projected_all += amount * (probability / 100);\n}\nfunction isPotentialClosure(deal) {\n  const probability = parseFloat(deal.Probability) || 0;\n  const stage = deal.Stage || '';\n  return probability >= 70 && !stage.toLowerCase().includes('closed');\n}\nfunction determineAction(deal) {\n  var _deal$Stage;\n  const stage = ((_deal$Stage = deal.Stage) === null || _deal$Stage === void 0 ? void 0 : _deal$Stage.toLowerCase()) || '';\n  if (stage.includes('proposal')) return 'Follow up on proposal';\n  if (stage.includes('negotiation')) return 'Schedule negotiation meeting';\n  return 'Review and update';\n}\nfunction updateOpportunityTypes(types, dealType, amount) {\n  if (!dealType) return;\n  dealType = dealType.toUpperCase();\n  if (dealType.includes('POC')) {\n    types.POC.value += amount;\n    types.POC.count++;\n  } else if (dealType.includes('MAP')) {\n    types.MAP.value += amount;\n    types.MAP.count++;\n  } else if (dealType.includes('GENAI') || dealType.includes('GEN AI')) {\n    types.GenAI.value += amount;\n    types.GenAI.count++;\n  }\n}\n\n/**\n * Main function to get dashboard data\n * @returns {Promise<Object>} Processed dashboard data\n */\nexport async function getDashboardData() {\n  try {\n    return transformDealsToDashboardData(dealsData.deals);\n  } catch (error) {\n    console.error('Error getting dashboard data:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["dealsData","transformDealsToDashboardData","deals","dashboardData","regional_pipeline","initializeRegionalPipeline","stage_region_breakdown","initializeRegionBreakdown","en_nn_split","initializeENNNSplit","revenue_projection","initializeRevenueProjection","potential_closures","initializePotentialClosures","opportunity_types","initializeOpportunityTypes","stage_movement","initializeStageMovement","financial_year","getCurrentFinancialYear","forEach","deal","amount","parseFloat","Amount","region","mapRegion","Region","quarter","getQuarterFromDate","Closing_Date","value","count","updateStageBreakdown","Stage","dealType","Type","isEN","includes","splitCategory","updateRevenueProjection","isPotentialClosure","push","name","Deal_Name","stage","action","determineAction","updateOpportunityTypes","Q1","APAC","EMEA","Americas","Q2","Q3","Q4","stages","EN","NN","quota","achieved","projected_80","projected_all","POC","MAP","GenAI","now","Date","currentMonth","getMonth","currentYear","getFullYear","startYear","toUpperCase","dateString","date","month","regionBreakdown","existingStage","find","s","projection","probability","Probability","toLowerCase","_deal$Stage","types","getDashboardData","error","console"],"sources":["/Users/jrkphani/Projects/Sales_presales_tracker/frontend/src/services/data/sales-data-service.js"],"sourcesContent":["// Sales data service for processing current-data.json\nimport dealsData from '../../data/current-data.json';\n\n/**\n * Transform raw deals data into dashboard format\n * @param {Array} deals - Array of deal objects from current-data.json\n * @returns {Object} Transformed dashboard data\n */\nfunction transformDealsToDashboardData(deals) {\n    const dashboardData = {\n        regional_pipeline: initializeRegionalPipeline(),\n        stage_region_breakdown: initializeRegionBreakdown(),\n        en_nn_split: initializeENNNSplit(),\n        revenue_projection: initializeRevenueProjection(),\n        potential_closures: initializePotentialClosures(),\n        opportunity_types: initializeOpportunityTypes(),\n        stage_movement: initializeStageMovement(),\n        financial_year: getCurrentFinancialYear()\n    };\n\n    // Process each deal\n    deals.forEach(deal => {\n        const amount = parseFloat(deal.Amount) || 0;\n        const region = mapRegion(deal.Region);\n        const quarter = getQuarterFromDate(deal.Closing_Date);\n        \n        // Update regional pipeline\n        if (quarter && dashboardData.regional_pipeline[quarter][region]) {\n            dashboardData.regional_pipeline[quarter][region].value += amount;\n            dashboardData.regional_pipeline[quarter][region].count++;\n        }\n\n        // Update stage breakdown\n        updateStageBreakdown(dashboardData.stage_region_breakdown[region], deal.Stage, amount);\n\n        // Update EN/NN split\n        const dealType = deal.Type || '';\n        const isEN = dealType.includes('EN') || dealType.includes('Existing');\n        const splitCategory = isEN ? 'EN' : 'NN';\n        dashboardData.en_nn_split[region][splitCategory].value += amount;\n        dashboardData.en_nn_split[region][splitCategory].count++;\n\n        // Update revenue projection\n        updateRevenueProjection(dashboardData.revenue_projection[region], deal);\n\n        // Update potential closures\n        if (isPotentialClosure(deal)) {\n            dashboardData.potential_closures[region].push({\n                name: deal.Deal_Name,\n                value: amount,\n                stage: deal.Stage,\n                action: determineAction(deal)\n            });\n        }\n\n        // Update opportunity types\n        updateOpportunityTypes(dashboardData.opportunity_types[region], deal.Type, amount);\n    });\n\n    return dashboardData;\n}\n\n// Helper functions\nfunction initializeRegionalPipeline() {\n    return {\n        Q1: { APAC: { value: 0, count: 0 }, EMEA: { value: 0, count: 0 }, Americas: { value: 0, count: 0 } },\n        Q2: { APAC: { value: 0, count: 0 }, EMEA: { value: 0, count: 0 }, Americas: { value: 0, count: 0 } },\n        Q3: { APAC: { value: 0, count: 0 }, EMEA: { value: 0, count: 0 }, Americas: { value: 0, count: 0 } },\n        Q4: { APAC: { value: 0, count: 0 }, EMEA: { value: 0, count: 0 }, Americas: { value: 0, count: 0 } }\n    };\n}\n\nfunction initializeRegionBreakdown() {\n    return {\n        APAC: { stages: [] },\n        EMEA: { stages: [] },\n        Americas: { stages: [] }\n    };\n}\n\nfunction initializeENNNSplit() {\n    return {\n        APAC: { EN: { value: 0, count: 0 }, NN: { value: 0, count: 0 } },\n        EMEA: { EN: { value: 0, count: 0 }, NN: { value: 0, count: 0 } },\n        Americas: { EN: { value: 0, count: 0 }, NN: { value: 0, count: 0 } }\n    };\n}\n\nfunction initializeRevenueProjection() {\n    return {\n        APAC: { quota: 0, achieved: 0, projected_80: 0, projected_all: 0 },\n        EMEA: { quota: 0, achieved: 0, projected_80: 0, projected_all: 0 },\n        Americas: { quota: 0, achieved: 0, projected_80: 0, projected_all: 0 }\n    };\n}\n\nfunction initializePotentialClosures() {\n    return {\n        APAC: [],\n        EMEA: [],\n        Americas: []\n    };\n}\n\nfunction initializeOpportunityTypes() {\n    return {\n        APAC: { POC: { value: 0, count: 0 }, MAP: { value: 0, count: 0 }, GenAI: { value: 0, count: 0 } },\n        EMEA: { POC: { value: 0, count: 0 }, MAP: { value: 0, count: 0 }, GenAI: { value: 0, count: 0 } },\n        Americas: { POC: { value: 0, count: 0 }, MAP: { value: 0, count: 0 }, GenAI: { value: 0, count: 0 } }\n    };\n}\n\nfunction initializeStageMovement() {\n    return {\n        APAC: [],\n        EMEA: [],\n        Americas: []\n    };\n}\n\nfunction getCurrentFinancialYear() {\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    const startYear = currentMonth < 3 ? currentYear - 1 : currentYear;\n    return `${startYear}-${startYear + 1}`;\n}\n\nfunction mapRegion(region) {\n    if (!region) return 'APAC';\n    region = region.toUpperCase();\n    if (region.includes('INDIA') || region.includes('ASIA') || region.includes('SINGAPORE') || \n        region.includes('MALAYSIA') || region.includes('PHILIPPINES') || region.includes('THAILAND')) {\n        return 'APAC';\n    }\n    if (region.includes('EUROPE') || region.includes('EMEA') || region.includes('MIDDLE EAST')) {\n        return 'EMEA';\n    }\n    return 'Americas';\n}\n\nfunction getQuarterFromDate(dateString) {\n    if (!dateString) return null;\n    const date = new Date(dateString);\n    const month = date.getMonth();\n    if (month >= 3 && month <= 5) return 'Q1';\n    if (month >= 6 && month <= 8) return 'Q2';\n    if (month >= 9 && month <= 11) return 'Q3';\n    return 'Q4';\n}\n\nfunction updateStageBreakdown(regionBreakdown, stage, amount) {\n    if (!stage) return;\n    const existingStage = regionBreakdown.stages.find(s => s.name === stage);\n    if (existingStage) {\n        existingStage.value += amount;\n        existingStage.count++;\n    } else {\n        regionBreakdown.stages.push({\n            name: stage,\n            value: amount,\n            count: 1\n        });\n    }\n}\n\nfunction updateRevenueProjection(projection, deal) {\n    const amount = parseFloat(deal.Amount) || 0;\n    const probability = parseFloat(deal.Probability) || 0;\n\n    if (deal.Stage === 'Closed Won') {\n        projection.achieved += amount;\n    }\n\n    if (probability >= 80) {\n        projection.projected_80 += amount * (probability / 100);\n    }\n    projection.projected_all += amount * (probability / 100);\n}\n\nfunction isPotentialClosure(deal) {\n    const probability = parseFloat(deal.Probability) || 0;\n    const stage = deal.Stage || '';\n    return probability >= 70 && !stage.toLowerCase().includes('closed');\n}\n\nfunction determineAction(deal) {\n    const stage = deal.Stage?.toLowerCase() || '';\n    if (stage.includes('proposal')) return 'Follow up on proposal';\n    if (stage.includes('negotiation')) return 'Schedule negotiation meeting';\n    return 'Review and update';\n}\n\nfunction updateOpportunityTypes(types, dealType, amount) {\n    if (!dealType) return;\n    dealType = dealType.toUpperCase();\n    \n    if (dealType.includes('POC')) {\n        types.POC.value += amount;\n        types.POC.count++;\n    } else if (dealType.includes('MAP')) {\n        types.MAP.value += amount;\n        types.MAP.count++;\n    } else if (dealType.includes('GENAI') || dealType.includes('GEN AI')) {\n        types.GenAI.value += amount;\n        types.GenAI.count++;\n    }\n}\n\n/**\n * Main function to get dashboard data\n * @returns {Promise<Object>} Processed dashboard data\n */\nexport async function getDashboardData() {\n    try {\n        return transformDealsToDashboardData(dealsData.deals);\n    } catch (error) {\n        console.error('Error getting dashboard data:', error);\n        throw error;\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}